// Generated from javelin-layout file
func activate0() {

}

func activateDynamic() {
  activate0();
}
func activateGlobal() {
  setEnableButtonStates(01);

}
func deactivate0() {

}

func deactivateDynamic() {}
func deactivateGlobal() {

}
var postPress;
var postRelease;

func _pressScanCode(scanCode, isModifier) {
  pressScanCode(scanCode);
  if (isModifier) return;

  if (postPress) {
    var localPostPress = postPress;
    postPress = 0;
    localPostPress();
  }
}

func _releaseScanCode(scanCode, isModifier) {
  releaseScanCode(scanCode);
  if (isModifier) return;

  if (postRelease) {
    var localPostRelease = postRelease;
    postRelease = 0;
    localPostRelease();
  }
}
// StenoModeUpdate Callback
func onStenoModeUpdate() {
  var stenoMode = getParameter("steno_mode");
  if (stenoMode == "embedded") {
    setRgb(0, 0, 1, 0);
  } else if (stenoMode == "gemini") {
    setRgb(0, 1, 0, 0);
  } else if (stenoMode == "tx_bolt") {
    setRgb(0, 0, 0, 1);
  } else if (stenoMode == "procat") {
    setRgb(0, 1, 1, 0);
  } else if (stenoMode == "plover_hid") {
    setRgb(0, 0, 1, 1);
  }
}

func init() {
  const SCRIPT_ID_STENO_MODE_UPDATE = 9;

  // Update the LED color at startup, and register for steno mode update callbacks.
  onStenoModeUpdate();
  setScript(SCRIPT_ID_STENO_MODE_UPDATE, @onStenoModeUpdate);

  activate0();
  activateGlobal();
}

func onPress0() {
}
func onRelease0() {
}

func onPress1() {
  pressStenoKey(0 /* "S1" */);
}
func onRelease1() {
  releaseStenoKey(0 /* "S1" */);
}

func onPress2() {
  pressStenoKey(2 /* "T-" */);
}
func onRelease2() {
  releaseStenoKey(2 /* "T-" */);
}

func onPress3() {
  pressStenoKey(4 /* "P-" */);
}
func onRelease3() {
  releaseStenoKey(4 /* "P-" */);
}

func onPress4() {
  pressStenoKey(6 /* "H-" */);
}
func onRelease4() {
  releaseStenoKey(6 /* "H-" */);
}

func onPress5() {
  pressStenoKey(26 /* "#1" */);
}
func onRelease5() {
  releaseStenoKey(26 /* "#1" */);
}

func onPress6() {
  pressStenoKey(10 /* "*1" */);
}
func onRelease6() {
  releaseStenoKey(10 /* "*1" */);
}

func onPress7() {
  pressStenoKey(16 /* "-F" */);
}
func onRelease7() {
  releaseStenoKey(16 /* "-F" */);
}

func onPress8() {
  pressStenoKey(18 /* "-P" */);
}
func onRelease8() {
  releaseStenoKey(18 /* "-P" */);
}

func onPress9() {
  pressStenoKey(20 /* "-L" */);
}
func onRelease9() {
  releaseStenoKey(20 /* "-L" */);
}

func onPress10() {
  pressStenoKey(22 /* "-T" */);
}
func onRelease10() {
  releaseStenoKey(22 /* "-T" */);
}

func onPress11() {
  pressStenoKey(24 /* "-D" */);
}
func onRelease11() {
  releaseStenoKey(24 /* "-D" */);
}

func onPress12() {
}
func onRelease12() {
}

func onPress13() {
  pressStenoKey(1 /* "S2" */);
}
func onRelease13() {
  releaseStenoKey(1 /* "S2" */);
}

func onPress14() {
  pressStenoKey(3 /* "K-" */);
}
func onRelease14() {
  releaseStenoKey(3 /* "K-" */);
}

func onPress15() {
  pressStenoKey(5 /* "W-" */);
}
func onRelease15() {
  releaseStenoKey(5 /* "W-" */);
}

func onPress16() {
  pressStenoKey(7 /* "R-" */);
}
func onRelease16() {
  releaseStenoKey(7 /* "R-" */);
}

func onPress17() {
  pressStenoKey(17 /* "-R" */);
}
func onRelease17() {
  releaseStenoKey(17 /* "-R" */);
}

func onPress18() {
  pressStenoKey(19 /* "-B" */);
}
func onRelease18() {
  releaseStenoKey(19 /* "-B" */);
}

func onPress19() {
  pressStenoKey(21 /* "-G" */);
}
func onRelease19() {
  releaseStenoKey(21 /* "-G" */);
}

func onPress20() {
  pressStenoKey(23 /* "-S" */);
}
func onRelease20() {
  releaseStenoKey(23 /* "-S" */);
}

func onPress21() {
  pressStenoKey(25 /* "-Z" */);
}
func onRelease21() {
  releaseStenoKey(25 /* "-Z" */);
}

func onPress22() {
  pressStenoKey(8 /* "A" */);
}
func onRelease22() {
  releaseStenoKey(8 /* "A" */);
}

func onPress23() {
  pressStenoKey(9 /* "O" */);
}
func onRelease23() {
  releaseStenoKey(9 /* "O" */);
}

func onPress24() {
  pressStenoKey(14 /* "E" */);
}
func onRelease24() {
  releaseStenoKey(14 /* "E" */);
}

func onPress25() {
  pressStenoKey(15 /* "U" */);
}
func onRelease25() {
  releaseStenoKey(15 /* "U" */);
}

func onPress26() {
  // Toggle Steno
  // Toggle the steno mode between embedded and Gemini PR when USR is pressed.
  // LED RGB is updated in Global StenoModeUpdate callback.
  if (getParameter("steno_mode") != "embedded") {
    console("set_steno_mode embedded");
  } else {
    console("set_steno_mode gemini");
  }
  releaseAll();
}
func onRelease26() {
}

func onPress27() {
  console("launch_bootloader");
}
func onRelease27() {
}

